// Generated by CoffeeScript 1.4.0
var algos, app, derby, get, i18n, misc, ready, setupSubscriptions, view, _;

derby = require('derby');

derby.use(require('derby-ui-boot'), {
  styles: []
});

derby.use(require('../../ui'));

derby.use(require('derby-auth/components'));

app = derby.createApp(module);

get = app.get, view = app.view, ready = app.ready;

i18n = require('./i18n');

i18n.localize(app, {
  availableLocales: ['en', 'he', 'bg', 'nl'],
  defaultLocale: 'en',
  urlScheme: false,
  checkHeader: true
});

misc = require('./misc');

misc.viewHelpers(view);

_ = require('lodash');

algos = require('habitrpg-shared/script/algos');

/*
  Subscribe to the user, the users's party (meta info like party name, member ids, etc), and the party's members. 3 subscriptions.
*/


setupSubscriptions = function(page, model, params, next, cb) {
  var myGroupsQuery, publicGroupsQuery, selfQ, uuid;
  uuid = model.get('_userId') || model.session.userId;
  selfQ = model.query('users').withId(uuid);
  publicGroupsQuery = model.query('groups').publicGroups();
  myGroupsQuery = model.query('groups').withMember(uuid);
  return model.fetch(publicGroupsQuery, myGroupsQuery, function(err, publicGroups, groups) {
    var finished, groupsInfo, groupsObj;
    if (err) {
      return next(err);
    }
    finished = function(descriptors, paths) {
      descriptors.unshift('groups.habitrpg');
      paths.unshift('_habitRPG');
      return model.subscribe.apply(model, descriptors.concat(function() {
        var refs, _ref;
        _ref = [arguments[0], arguments], err = _ref[0], refs = _ref[1];
        if (err) {
          return next(err);
        }
        _.each(paths, function(path, idx) {
          model.ref(path, refs[idx + 1]);
          return true;
        });
        if (!model.get('_user')) {
          console.error("User not found - this shouldn't be happening!");
          return page.redirect('/logout');
        }
        return cb();
      }));
    };
    model.set('_publicGroups', _.sortBy(publicGroups.get(), function(g) {
      return -_.size(g.members);
    }));
    groupsObj = groups.get();
    if (_.isEmpty(groupsObj)) {
      return finished([selfQ], ['_user']);
    }
    groupsInfo = _.reduce(groupsObj, (function(m, g) {
      if (g.type === 'guild') {
        m.guildIds.push(g.id);
      } else {
        m.partyId = g.id;
      }
      m.members = m.members.concat(g.members);
      return m;
    }), {
      guildIds: [],
      partyId: null,
      members: []
    });
    return model.query('users').publicInfo(groupsInfo.members).fetch(function(err, members) {
      var descriptors, mObj, paths;
      if (err) {
        return next(err);
      }
      mObj = members.get();
      model.set("_members", _.object(_.pluck(mObj, 'id'), mObj));
      model.set("_membersArray", mObj);
      descriptors = [selfQ];
      paths = ['_user'];
      if (groupsInfo.partyId) {
        descriptors.unshift(model.query('groups').withIds(groupsInfo.partyId));
        paths.unshift('_party');
      }
      if (!_.isEmpty(groupsInfo.guildIds)) {
        descriptors.unshift(model.query('groups').withIds(groupsInfo.guildIds));
        paths.unshift('_guilds');
      }
      return finished(descriptors, paths);
    });
  });
};

get('/', function(page, model, params, next) {
  var _ref, _ref1;
  if (((_ref = page.params) != null ? (_ref1 = _ref.query) != null ? _ref1.play : void 0 : void 0) != null) {
    return page.redirect('/');
  }
  return setupSubscriptions(page, model, params, next, function() {
    require('./items').server(model);
    _.each(['habit', 'daily', 'todo', 'reward'], function(type) {
      model.refList("_" + type + "List", "_user.tasks", "_user." + type + "Ids");
      return true;
    });
    return page.render();
  });
});

ready(function(model) {
  var browser, user;
  user = model.at('_user');
  misc.fixCorruptUser(model);
  browser = require('./browser');
  require('./tasks').app(exports, model);
  require('./items').app(exports, model);
  require('./groups').app(exports, model, app);
  require('./profile').app(exports, model);
  require('./pets').app(exports, model);
  require('../server/private').app(exports, model);
  if (model.flags.nodeEnv !== 'production') {
    require('./debug').app(exports, model);
  }
  browser.app(exports, model, app);
  require('./unlock').app(exports, model);
  require('./filters').app(exports, model);
  require('./challenges').app(exports, model);
  exports.removeAt = function(e, el) {
    var confirmMessage;
    if ((confirmMessage = $(el).attr('data-confirm')) != null) {
      if (confirm(confirmMessage) !== true) {
        return;
      }
    }
    e.at().remove();
    if ($(el).attr('data-refresh')) {
      return browser.resetDom(model);
    }
  };
  /*
      Cron
  */

  return misc.batchTxn(model, function(uObj, paths) {
    _.each(['habit', 'daily', 'todo', 'reward'], function(type) {
      uObj["" + type + "s"] = _.where(uObj.tasks, {
        type: type
      });
      return true;
    });
    algos.cron(uObj, {
      paths: paths
    });
    if (_.isEmpty(paths) || (paths['lastCron'] && _.size(paths) === 1)) {
      return;
    }
    if (paths['stats.hp']) {
      delete paths['stats.hp'];
      return setTimeout(function() {
        browser.resetDom(model);
        return user.set('stats.hp', uObj.stats.hp);
      }, 750);
    }
  }, {
    cron: true
  });
});
