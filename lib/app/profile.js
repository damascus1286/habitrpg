// Generated by CoffeeScript 1.4.0
var algos, browser, helpers, items, misc, _;

helpers = require('habitrpg-shared/script/helpers');

algos = require('habitrpg-shared/script/algos');

browser = require('./browser');

items = require('./items');

misc = require('./misc');

_ = require('lodash');

module.exports.app = function(appExports, model) {
  var toggleGamePane, user;
  user = model.at('_user');
  appExports.revive = function() {
    var paths, uObj, _ref;
    _ref = [user.get(), {}], uObj = _ref[0], paths = _ref[1];
    algos.revive(uObj, {
      paths: paths
    });
    return _.each(paths, (function(v, k) {
      return user.set(k, helpers.dotGet(k, uObj));
    }));
  };
  appExports.reset = function(e, el) {
    misc.batchTxn(model, function(uObj, paths, batch) {
      batch.set('tasks', {});
      ['habit', 'daily', 'todo', 'reward'].forEach(function(type) {
        return batch.set("" + type + "Ids", []);
      });
      _.each({
        hp: 50,
        lvl: 1,
        gp: 0,
        exp: 0
      }, function(v, k) {
        return batch.set("stats." + k, v);
      });
      return _.each({
        armor: 0,
        weapon: 0,
        head: 0,
        shield: 0
      }, function(v, k) {
        return batch.set("items." + k, v);
      });
    });
    return browser.resetDom(model);
  };
  appExports.closeNewStuff = function(e, el) {
    return user.set('flags.newStuff', 'hide');
  };
  appExports.customizeGender = function(e, el) {
    return user.set('preferences.gender', $(el).attr('data-value'));
  };
  appExports.customizeHair = function(e, el) {
    return user.set('preferences.hair', $(el).attr('data-value'));
  };
  appExports.customizeSkin = function(e, el) {
    return user.set('preferences.skin', $(el).attr('data-value'));
  };
  appExports.customizeArmorSet = function(e, el) {
    return user.set('preferences.armorSet', $(el).attr('data-value'));
  };
  appExports.restoreSave = function() {
    return misc.batchTxn(model, function(uObj, paths, batch) {
      return $('#restore-form input').each(function() {
        var path, val, _ref;
        _ref = [$(this).attr('data-for'), parseInt($(this).val() || 1)], path = _ref[0], val = _ref[1];
        return batch.set(path, val);
      });
    });
  };
  appExports.toggleHeader = function(e, el) {
    return user.set('preferences.hideHeader', !user.get('preferences.hideHeader'));
  };
  appExports.deleteAccount = function(e, el) {
    return model.del("users." + (user.get('id')), function() {
      return location.href = "/logout";
    });
  };
  appExports.profileAddWebsite = function(e, el) {
    var newWebsite;
    newWebsite = model.get('_newProfileWebsite');
    if (/^(\s)*$/.test(newWebsite)) {
      return;
    }
    user.unshift('profile.websites', newWebsite);
    return model.set('_newProfileWebsite', '');
  };
  appExports.profileEdit = function(e, el) {
    return model.set('_profileEditing', true);
  };
  appExports.profileSave = function(e, el) {
    return model.set('_profileEditing', false);
  };
  appExports.profileRemoveWebsite = function(e, el) {
    var i, sites;
    sites = user.get('profile.websites');
    i = sites.indexOf($(el).attr('data-website'));
    sites.splice(i, 1);
    return user.set('profile.websites', sites);
  };
  toggleGamePane = function() {
    return model.set('_gamePane', !model.get('_gamePane'), function() {
      return browser.setupTooltips();
    });
  };
  appExports.clickAvatar = function(e, el) {
    var uid;
    uid = $(el).attr('data-uid');
    if (uid === model.get('_userId')) {
      return toggleGamePane();
    } else {
      return $("#avatar-modal-" + uid).modal('show');
    }
  };
  appExports.toggleGamePane = function() {
    return toggleGamePane();
  };
  return appExports.toggleResting = function() {
    return model.set('_user.flags.rest', !model.get('_user.flags.rest'));
  };
};
