// Generated by CoffeeScript 1.4.0
var hatchingPotions, pets, randomVal, _, _ref;

_ = require('lodash');

randomVal = require('habitrpg-shared/script/helpers').randomVal;

_ref = require('habitrpg-shared/script/items').items, pets = _ref.pets, hatchingPotions = _ref.hatchingPotions;

/*
  Listeners to enabled flags, set notifications to the user when they've unlocked features
*/


module.exports.app = function(appExports, model) {
  var alreadyShown, showPopover, user;
  user = model.at('_user');
  alreadyShown = function(before, after) {
    return !(!before && after === true);
  };
  showPopover = function(selector, title, html, placement) {
    if (placement == null) {
      placement = 'bottom';
    }
    $(selector).popover('destroy');
    html += " <a href='#' onClick=\"$('" + selector + "').popover('hide');return false;\">[Close]</a>";
    return $(selector).popover({
      title: title,
      placement: placement,
      trigger: 'manual',
      html: true,
      content: html
    }).popover('show');
  };
  user.on('set', 'flags.customizationsNotification', function(after, before) {
    var html;
    if (alreadyShown(before, after)) {
      return;
    }
    $('.main-herobox').popover('destroy');
    html = "Click your avatar to customize your appearance.";
    return showPopover('.main-herobox', 'Customize Your Avatar', html, 'bottom');
  });
  user.on('set', 'flags.itemsEnabled', function(after, before) {
    var html;
    if (alreadyShown(before, after)) {
      return;
    }
    html = "<img src='/vendor/BrowserQuest/client/img/1/chest.png' />\nCongratulations, you have unlocked the Item Store! You can now buy weapons, armor, potions, etc. Read each item's comment for more information.";
    return showPopover('div.rewards', 'Item Store Unlocked', html, 'left');
  });
  user.on('set', 'flags.petsEnabled', function(after, before) {
    var html;
    if (alreadyShown(before, after)) {
      return;
    }
    html = "<img src='/img/sprites/wolf_border.png' style='width:30px;height:30px;float:left;padding-right:5px' />\nYou have unlocked Pets! You can now buy pets with Gems (note, you replenish Gems with real-life money - so chose your pets wisely!)";
    return showPopover('#rewardsTabs', 'Pets Unlocked', html, 'left');
  });
  user.on('set', 'flags.partyEnabled', function(after, before) {
    var html;
    if (user.get('party.current') || alreadyShown(before, after)) {
      return;
    }
    html = "Be social, join a party and play Habit with your friends! You'll be better at your habits with accountability partners. Click User -> Options -> Party, and follow the instructions. LFG anyone?";
    return showPopover('.user-menu', 'Party System', html, 'bottom');
  });
  user.on('set', 'flags.dropsEnabled', function(after, before) {
    var dontPersist, egg;
    if (alreadyShown(before, after)) {
      return;
    }
    egg = randomVal(pets);
    dontPersist = model._dontPersist;
    model._dontPersist = false;
    user.push('items.eggs', egg);
    model._dontPersist = dontPersist;
    return $('#drops-enabled-modal').modal('show');
  });
  user.on('push', 'items.pets', function(after, before) {
    var dontPersist;
    if (user.get('achievements.beastMaster')) {
      return;
    }
    if (before >= 90) {
      dontPersist = model._dontPersist;
      model._dontPersist = false;
      user.set('achievements.beastMaster', true, (function() {
        return model._dontPersist = dontPersist;
      }));
      return $('#beastmaster-achievement-modal').modal('show');
    }
  });
  user.on('set', 'items.*', function(after, before) {
    var dontPersist, items;
    if (user.get('achievements.ultimateGear')) {
      return;
    }
    items = user.get('items');
    if (parseInt(items.weapon) >= 6 && parseInt(items.armor) >= 5 && parseInt(items.head) >= 5 && parseInt(items.shield) >= 5) {
      dontPersist = model._dontPersist;
      model._dontPersist = false;
      user.set('achievements.ultimateGear', true, (function() {
        return model._dontPersist = dontPersist;
      }));
      return $('#max-gear-achievement-modal').modal('show');
    }
  });
  return user.on('set', 'tasks.*.streak', function(id, after, before) {
    var dontPersist;
    if (after > 0) {
      if ((after % 21) === 0) {
        dontPersist = model._dontPersist;
        model._dontPersist = false;
        user.incr('achievements.streak', 1, (function() {
          return model._dontPersist = dontPersist;
        }));
        return $('#streak-achievement-modal').modal('show');
      } else if ((before - after === 1) && (before % 21 === 0)) {
        dontPersist = model._dontPersist;
        model._dontPersist = false;
        return user.incr('achievements.streak', -1, (function() {
          return model._dontPersist = dontPersist;
        }));
      }
    }
  });
};
