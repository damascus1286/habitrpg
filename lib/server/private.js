// Generated by CoffeeScript 1.4.0
var misc, _;

_ = require('lodash');

misc = require("../app/misc");

module.exports.middleware = function(req, res, next) {
  var model;
  model = req.getModel();
  model.set('_stripePubKey', process.env.STRIPE_PUB_KEY);
  return next();
};

module.exports.app = function(appExports, model) {
  appExports.showStripe = function(e, el) {
    var disableAds, token;
    token = function(res) {
      return $.ajax({
        type: "POST",
        url: "/charge",
        data: res
      }).success(function() {
        return window.location.href = "/";
      }).error(function(err) {
        return alert(err.responseText);
      });
    };
    disableAds = model.get('_user.flags.ads') === 'hide' ? '' : 'Disable Ads, ';
    return StripeCheckout.open({
      key: model.get('_stripePubKey'),
      address: false,
      amount: 500,
      name: "Checkout",
      description: "Buy 20 Gems, " + disableAds + "Support the Developers",
      panelLabel: "Checkout",
      token: token
    });
  };
  /*
      Buy Reroll Button
  */

  return appExports.buyReroll = function() {
    misc.batchTxn(model, function(uObj, paths, batch) {
      uObj.balance -= 1;
      paths['balance'] = 1;
      return _.each(uObj.tasks, function(task) {
        if (task.type !== 'reward') {
          batch.set("tasks." + task.id + ".value", 0);
        }
        return true;
      });
    });
    return $('#reroll-modal').modal('hide');
  };
};

module.exports.routes = function(expressApp) {
  /*
      Setup Stripe response when posting payment
  */
  return expressApp.post('/charge', function(req, res) {
    var api_key, stripe, stripeCallback, token;
    stripeCallback = function(err, response) {
      var model, userId;
      if (err) {
        console.error(err, 'Stripe Error');
        return res.send(500, err.response.error.message);
      } else {
        model = req.getModel();
        userId = model.get('_userId');
        req._isServer = true;
        return model.fetch("users." + userId, function(err, user) {
          model.ref('_user', "users." + userId);
          model.set('_user.balance', model.get('_user.balance') + 5);
          model.set('_user.flags.ads', 'hide');
          return res.send(200);
        });
      }
    };
    api_key = process.env.STRIPE_API_KEY;
    stripe = require("stripe")(api_key);
    token = req.body.id;
    return stripe.charges.create({
      amount: "500",
      currency: "usd",
      card: token
    }, stripeCallback);
  });
};
